(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{469:function(e,t,a){"use strict";a.r(t);var n=a(42),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"building-a-one-one-relationship-query-in-faunadb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#building-a-one-one-relationship-query-in-faunadb"}},[e._v("#")]),e._v(" Building a One-One Relationship query in faunadb")]),e._v(" "),a("p",[e._v("Faunadb is awesome when it comes to scalability and ease of administration but I had a few problems with fql as I couldn’t figure out how to do relationship queries and how to build schemas for it. Here are a few things things I learned.")]),e._v(" "),a("p",[e._v("Let us assume we have two collections "),a("code",[e._v("Users")]),e._v(" and "),a("code",[e._v("Role")]),e._v(" with the following fields in mysql or a relational database")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Users {\n\t“userId”:1,\n\t“name”: “John Doe”,\n\t“email”: “johndoe@gmail.com”,\n\t“roleId”: 1\n}\n")])])]),a("p",[e._v("and")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Roles {\n       “roleId”: 1,\n      \t“name”: “Admin”,\n\t“permissions”:  [“read”,”write”,”execute”]\n}\n")])])]),a("p",[e._v("In the mongoldb world, I would use something like")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("db.collection(‘Users’).aggregate([\n\t{\n          $match : { userId: 1 }\n        },{\n\t $lookup: {\n\t\tfrom: ‘Roles’,\n\t\tlocalField: ‘roleId”,\n                foreignField: ‘roleId”,\n\t\tas: “roles”\t\n           }\n\t}\n])\n")])])]),a("p",[e._v("or the code below in mysql")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  SELECT users.*, roles.* FROM users JOIN roles  ON  users.roleId = roles.roleId WHERE users.userId = 1\n\n")])])]),a("p",[e._v("This would give use the data from both tables/collections.")]),e._v(" "),a("p",[e._v("In faunadb, however, the "),a("code",[e._v("roleId")]),e._v(" and "),a("code",[e._v("userId")]),e._v(" can be replaced with "),a("code",[e._v("Refs")]),e._v(" that allow the documents to be referenced. So the query above can be written in faunadb in the following way")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("         q.Let(\n                    {\n                      user: q.Get(q.Ref(q.Collection(‘Users’), 1)),\n\t\t      role: q.Get(\n                        q.Select(\n                          ['data’,’roleRef'],\n                          q.Var(‘user’)\n                        )\n                      )                   \n\t\t  },\n                    {\n                      user: q.Var(‘user’),\n                      role: q.Var(‘role’),\n                    }\n                  )\n            )\n")])])]),a("p",[e._v("but this necessitates that our schema be rearranged to")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Users {\n\t“name”: “John Doe”,\n\t“email”: “johndoe@gmail.com”,\n\t“roleRef”: <ref of the role> \n}\n")])])]),a("p",[e._v("and")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Roles {\n      \t“name”: “Admin”,\n\t“permissions”:  [“read”,”write”,”execute”]\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("This removes the need for a role id and a user id and we need to reference the `Ref` of the Role using `q.Ref(“Roles”, <refId of the document>)`. The query would result in the data below \n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n\tuser: {\n\t\t\tname: “John Doe”,\n\t\t\temail: “johndoe@gmail.com”,   \n\t},\n\trole: {\n        \t \tname: “Admin”,\n\t\tpermissions:  [“read”,”write”,”execute”]\n\t}\n}\n")])])]),a("p",[e._v("The above can also be achieved in another way using the "),a("strong",[e._v("earlier schema")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("q.Let(\n  {\n    user: q.Get(q.Ref(q.Collection(‘Users’), 1)),\n    role: q.Get(\n      q.Ref(\n        q.Collection(‘roles’),\n        q.Select(\n          [‘roleId'],\n          q.Var(‘user’)\n        )\n      )\n    )\n  },\n  {\n    user: q.Var(‘user’),\n    role: q.Var(‘role’)\n  }\n)\n")])])]),a("p",[e._v("The above however requires work and increases the query complexity in my opinion.")]),e._v(" "),a("p",[e._v("Thanks to Summer, April and Brecht from Fauna for helping me out with this.")]),e._v(" "),a("p",[e._v("References:\nhttps://forums.fauna.com/t/querying-a-one-to-one-relations-using-fql/232/6")])])}),[],!1,null,null,null);t.default=s.exports}}]);