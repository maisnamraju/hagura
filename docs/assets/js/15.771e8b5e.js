(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{465:function(t,r,e){"use strict";e.r(r);var n=e(42),o=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"reactive-forms-in-angular-part-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reactive-forms-in-angular-part-1"}},[t._v("#")]),t._v(" Reactive forms in Angular Part 1")]),t._v(" "),e("p",[t._v("Reactive forms are a new approach to handling forms in angular. They offer a more event driven approach to forms. It provides the ability to control data by using a mix of a template and an model; it also allows you to follow the reactive programming patterns ( not forced upon) you.")]),t._v(" "),e("h4",{attrs:{id:"importing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#importing"}},[t._v("#")]),t._v(" Importing")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    ...,\n    ReactiveFormsModule\n  ],\n  declarations: [...],\n  bootstrap: [...]\n})\nexport class AppModule {}\n\n")])])]),e("h4",{attrs:{id:"form-data-structure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#form-data-structure"}},[t._v("#")]),t._v(" Form Data Structure")]),t._v(" "),e("p",[t._v("The Data inside the form will have the following")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t{\n\t\tname: string,\n\t\tcourses: [{\n\t\t\tid: string,\n\t\t\tname:string\n\t\t},...],\n\t\taddress: {\n\t\t\taddress1: string,\n\t\t\taddress2: string\n\t\t}\n\t}\n")])])]),e("h4",{attrs:{id:"formgroup-formarray-and-formcontrol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#formgroup-formarray-and-formcontrol"}},[t._v("#")]),t._v(" FormGroup, FormArray and FormControl")]),t._v(" "),e("p",[t._v("These three elements are the fundamental parts of the reactive form module. This is how the above data structure would look like once coded into a reactive form.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\tFormGroup \n\t\tFormControl\n\t\tFormArray\n\t\t\t\tFormGroup\n\t\t\t\t\tFormControl\n\t\tFormGroup\n\t\t\tFormControl\n\t\t\tFormControl\n")])])]),e("p",[t._v("At the lowest level what we have is the FormControl which translates to a single property or  input on the form; The FormControl can be inserted into FormArrays and FormGroups depending on the necessity. Finally, the entire stack of FormControl, FormGroups and FormArrays need to be enclosed inside a FormGroup which completes the form.")]),t._v(" "),e("p",[t._v("The data inside the form can be rewritten into a FormGroup with the configuration below.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const form = new FormGroup({\n\tname: new FormControl('',Validators.required),\n\tcourses: new FormArray([new FormGroup({\n\t\tid: new FormControl('', Validators.required),\n\t\tname: new FormControl('',Validators.required)\n\t})]),\n\taddress: new FormGroup({\n\t\taddress1: new FormControl(''),\n\t\taddress2: new FormControl('')\n\t})\n})\n")])])]),e("h4",{attrs:{id:"formbuilder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#formbuilder"}},[t._v("#")]),t._v(" FormBuilder")]),t._v(" "),e("p",[t._v("The above code can be shortened by using the FormBuilder which shortens our code.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const form = this.fb.group({\n\tname: ['',Validators.required],\n\tcourses: this.fb.array([\n\t\t\t\tthis.fb.group({\n\t\t\t\t\tid: ['',Validators.required],\n\t\t\t\t\tname: ['', Validators.required]\n\t\t\t\t})\n\t\t\t]),\n\taddress: this.fb.group({\n\t\taddress1: [''],\n\t\taddress2: ['']\n\t})\t\t\n})\n")])])]),e("p",[t._v("(Validators are a bunch of methods that you attach to your FormControls to validate your input "),e("a",{attrs:{href:"https://angular.io/api/forms/Validators",target:"_blank",rel:"noopener noreferrer"}},[t._v("You could read more about them over here "),e("OutboundLink")],1),t._v(") You can chain a number of validators in your code.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\n\n\n@Component({\n    selector: 'form-component',\n    template: './form.component.html'\n})\n\nexport class FormComponent implements OnInit {\n\tpublic form: FormGroup;\n\t\n\tconstructor(\n\t\tprivate fb: FormBuilder\n\t){\n\t}\n\t\n\tget course() {\n\t\treturn this.fb.group({\n\t\t\t\t\t\t\tid: ['',Validators.required],\n\t\t\t\t\t\t\tname: ['', Validators.required]\n\t\t\t\t\t\t});\n\t}\n\t\n\tngOnInit() {\n\t\tthis.form = this.fb.group({\n\t\t\tname: ['',Validators.required],\n\t\t\tcourses: this.fb.array([\n\t\t\t\t\t\tthis.course()\n\t\t\t\t\t]),\n\t\t\taddress: this.fb.group({\n\t\t\t\taddress1: [''],\n\t\t\t\taddress2: ['']\n\t\t\t})\t\t\n\t\t});\n\t}\n\t\n\tsubmit(data) {\n\t\n\t\n\t}\n}\n\n")])])]),e("p",[t._v("And our actual template file")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t<form novalidate (ngSubmit)="submit(form.valid)" [formGroup]="form">\n\t\t <input formControlName="name" type="text" />\n        <span *ngIf="form.get(\'name\').hasError(\'required\') && form.get(\'name\').touched">Enter Name </span>\n        <div formArrayName="courses">\n\t        <div *ngFor="course of courses; index as i " formGroupName="{{i}}">\n\t        \t\t<div>\n\t        \t\t\t<input formControlName="id" type="text" />\n\t\t    \t\t\t<span class="error" *ngIf="!course?.required">Please enter the course id</span>\n\t\t\t\t\t</div>\n\t    \t\t   <div>\n\t        \t\t\t<input formControlName="name" type="text" />\n\t        \t\t\t<span class="error" *ngIf="!course?.required">Please enter the course name</span>\n\t        \t\t</div>\n\t        \t\t<div>\n\t        \t\t\t<button (click)="add" [disabled]="course.invalid"></button>\n\t        \t\t</div>\n\t        </div>\n\t     </div>\n\t     <div formGroup="address">\n\t     \t\t<input formControlName="address1" type="text" />\n\t\t\t\t<input formControlName="address2" type="text" />\n\t     </div>\n\t</form>\n')])])]),e("p",[e("a",{attrs:{href:"http://blog.maisnamraju.com/2017/07/14/reactive-forms-in-angular2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("(continued in part 2)"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=o.exports}}]);